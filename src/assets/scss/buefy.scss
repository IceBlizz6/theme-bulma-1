
/*
@import "~bulma/sass/utilities/_all";
@import "~bulma/sass/form/all";
*/

$speed-slow: 150ms !default;
$speed-slower: 250ms !default;

$primary: #7957d5 !default;
$primary-invert: findColorInvert(#7957d5) !default;
$primary-light: findLightColor(#7957d5) !default;
$primary-dark: findDarkColor(#7957d5) !default;

$info: #167df0 !default;

$link: $primary !default;
$link-invert: $primary-invert !default;
$link-visited: $grey !default;
$link-focus-border: $primary !default;

$label-weight: $weight-semibold !default;

// FORMS
.help.counter {
    float: right;
    margin-left: 0.5em;
}

// SELECT
.select {
    select {
        option {
            color: $grey-dark;
            padding: $control-padding-vertical $control-padding-horizontal;
        }
        option:disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }
        optgroup {
            color: $grey-light;
            font-weight: $weight-normal;
            font-style: normal;
            padding: 0.25em 0;
        }
        &.is-empty {
            color: rgba($grey, 0.7);
        }
    }
}

// AUTOCOMPLETE

$dropdown-content-max-height: 200px !default;

.autocomplete {
    position: relative;
    .dropdown-menu {
        display: block;
        width: 100%;
        &.is-opened-top {
            top: auto;
            bottom: 100%;
        }
    }
    .dropdown-content {
        overflow: auto;
        max-height: $dropdown-content-max-height;
    }
    .dropdown-item {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        // added due to div instead of a
        cursor: pointer;
        &.is-hovered, &:hover {
            background: $dropdown-item-hover-background-color;
            color: $dropdown-item-hover-color;
        }
        &.is-disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    }
}

// TAGSINPUT

$taginput-height: calc(2em - 1px) !default;

.taginput {
    .taginput-container {
        display: flex;
        &.is-focusable {
            @extend %input-textarea;
            padding-bottom: 0;
            padding-top: calc(0.275em - 1px);
            padding-left: 0;
            padding-right: 0;
            align-items: center;
            flex-wrap: wrap;
            justify-content: flex-start;
            height: auto;
            cursor: text;
        }
        &:not(.is-focusable) {
            align-items: center;
            flex-wrap: wrap;
            justify-content: flex-start;
            height: auto;
            &.is-small {
                @include control-small;
            }
            &.is-medium{
                @include control-medium;
            }
            &.is-large {
                @include control-large;
            }
        }

        > .tag,
        > .tags {
            margin-left: 0.275rem;
            margin-bottom: calc(0.275em - 1px);
            font-size: 0.9em;
            height: $taginput-height;
            .tag {
                margin-bottom: 0;
                font-size: 0.9em;
                height: $taginput-height;
                &.is-delete {
                    width: $taginput-height;
                }
            }
        }

        .tag:not(body) .icon {
            margin-left: 0.275rem;
            margin-bottom: calc(0.275em - 1px);
        }

        .autocomplete {
            position: static;
            flex: 1;
            input {
                height: $taginput-height;
                margin-bottom: calc(0.275em - 1px);
                padding-top: 0;
                padding-bottom: 0;
                border: none;
                box-shadow: none;
                min-width: 8em;
                &:focus {
                    box-shadow: none !important;
                }
            }
            .icon {
                height: $taginput-height;
            }
            > .control.is-loading::after {
                top: 0.375em;
            }
        }
    }
}

// SWITCH

$switch-width-number: 2.75 !default;
$switch-width: $switch-width-number * 1em !default;
$switch-padding: 0.2em !default;
$switch-active-background-color: $primary !default;
$switch-colors: $form-colors !default;

.switch {
    @extend %unselectable;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    position: relative;
    margin-right: 0.5em;
    & + .switch:last-child {
        margin-right: 0;
    }
    input[type=checkbox] {
        position: absolute;
        left: 0;
        opacity: 0;
        outline: none;
        z-index: -1;
        + .check {
            display: flex;
            align-items: center;
            flex-shrink: 0;
            width: $switch-width;
            height: #{$switch-width / 2 + $switch-padding};
            padding: $switch-padding;
            background: $grey-light;
            border-radius: $radius;
            transition: background $speed-slow $easing, box-shadow $speed-slow $easing;
            @each $name, $pair in $switch-colors {
                $color: nth($pair, 1);
                &.is-#{$name}-passive, &:hover {
                    background: $color;
                }
                &.input[type=checkbox] + &.check {
                    background: 'pink';
                }
            }
            &:before {
                content: "";
                display: block;
                border-radius: $radius;
                width: #{($switch-width - $switch-padding * 2) / 2};
                height: #{($switch-width - $switch-padding * 2) / 2};
                background: $background;
                box-shadow: 0 3px 1px 0 rgba(0, 0, 0, 0.05), 0 2px 2px 0 rgba(0, 0, 0, 0.1), 0 3px 3px 0 rgba(0, 0, 0, 0.05);
                transition: transform $speed-slow $easing;
                will-change: transform;
                transform-origin: left;
            }
            &.is-elastic:before {
                transform: scaleX(1.5);
                border-radius: $radius;
            }
        }
        &:checked + .check {
            background: $switch-active-background-color;
            @each $name, $pair in $switch-colors {
                $color: nth($pair, 1);
                &.is-#{$name} {
                    background: $color;
                }
            }
            &:before {
                transform: translate3d(100%, 0, 0);
            }
            &.is-elastic:before {
                // Might be a little offset if base font is not 16px
                transform: translate3d(50%, 0, 0) scaleX(1.5);
            }
        }
        &:focus, &:active {
            outline: none;
            + .check {
                box-shadow: 0 0 0.5em rgba($grey, 0.6);
                @each $name, $pair in $switch-colors {
                    $color: nth($pair, 1);
                    &.is-#{$name}-passive {
                        box-shadow: 0 0 0.5em rgba($color, 0.8);
                    }
                }
            }
            &:checked + .check {
                box-shadow: 0 0 0.5em rgba($switch-active-background-color, 0.8);
                @each $name, $pair in $switch-colors {
                    $color: nth($pair, 1);
                    &.is-#{$name} {
                        box-shadow: 0 0 0.5em rgba($color, 0.8);
                    }
                }
            }
        }
    }

    &.has-left-label {
        flex-direction: row-reverse;
        .control-label {
            padding-right: $control-padding-horizontal;
        }
    }

    &:not(.has-left-label) {
        .control-label {
            padding-left: $control-padding-horizontal;
        }
    }

    &:hover {
        input[type=checkbox] + .check {
            background: rgba($grey-light, 0.9);
            @each $name, $pair in $switch-colors {
                $color: nth($pair, 1);
                &.is-#{$name}-passive {
                    background: rgba($color, 0.9);
                }
            }
        }
        input[type=checkbox]:checked + .check {
            background: rgba($switch-active-background-color, 0.9);
            @each $name, $pair in $switch-colors {
                $color: nth($pair, 1);
                &.is-#{$name} {
                    background: rgba($color, 0.9);
                }
            }
        }
    }
    &.is-rounded {
        input[type=checkbox] {
            + .check {
                border-radius: $radius-rounded;
                &:before {
                    border-radius: $radius-rounded;
                }
            }
            &.is-elastic:before {
                transform: scaleX(1.5);
                border-radius: $radius-rounded;
            }
        }
    }
    &.is-outlined {
        input[type=checkbox] {
            + .check {
                background: transparent;
                border: .1rem solid $grey-light;
                @each $name, $pair in $switch-colors {
                    $color: nth($pair, 1);
                    &.is-#{$name}-passive {
                        border: .1rem solid rgba($color, 0.9);
                        &:before {
                            background: $color
                        }
                        &:hover {
                            border-color: rgba($color, 0.9);
                        }
                    }
                }
                &:before {
                    background: $grey-light;
                }
            }
            &:checked + .check {
                border-color: $switch-active-background-color;
                @each $name, $pair in $switch-colors {
                    $color: nth($pair, 1);
                    &.is-#{$name} {
                        background: transparent;
                        border-color: $color;
                        &:before {
                            background: $color;
                        }
                    }
                }
                &:before {
                    background: $switch-active-background-color;
                }
            }
        }
        &:hover {
            input[type=checkbox] + .check {
                background: transparent;
                border-color: rgba($grey-light, 0.9);
            }
            input[type=checkbox]:checked + .check {
                background: transparent;
                border-color: rgba($switch-active-background-color, 0.9);
                @each $name, $pair in $switch-colors {
                    $color: nth($pair, 1);
                    &.is-#{$name} {
                        border-color: rgba($color, 0.9);
                    }
                }
            }
        }
    }
    &.is-small {
        @include control-small;
    }
    &.is-medium{
        @include control-medium;
    }
    &.is-large {
        @include control-large;
    }
    &[disabled] {
        opacity: 0.5;
        cursor: not-allowed;
        color: $grey;
    }
}